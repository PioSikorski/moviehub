# Generated by Django 5.0.6 on 2024-06-29 15:22

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Group',
            fields=[
                ('code', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=150)),
                ('slug', models.SlugField(unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nickname', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('imdb_id', models.CharField(primary_key=True, serialize=False, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('type', models.TextField(choices=[('movie', 'Movie'), ('series', 'Series')])),
                ('description', models.TextField()),
                ('year', models.DateField()),
                ('genre', models.TextField()),
                ('director', models.TextField()),
                ('writers', models.TextField()),
                ('actors', models.TextField()),
                ('country', models.TextField()),
                ('poster', models.CharField(max_length=255)),
                ('awards', models.TextField()),
                ('imdb_score', models.CharField()),
                ('rottentomato_score', models.CharField()),
                ('metacritic_score', models.CharField()),
                ('filmweb_score', models.CharField(blank=True, null=True)),
                ('imdb_url', models.TextField()),
                ('rottentomato_url', models.TextField()),
                ('metacritic_url', models.TextField()),
                ('filmweb_url', models.TextField(blank=True, null=True)),
                ('groups', models.ManyToManyField(related_name='movies', to='movies.group')),
            ],
        ),
        migrations.CreateModel(
            name='GroupMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movies.group')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movies.user')),
            ],
        ),
        migrations.AddField(
            model_name='group',
            name='members',
            field=models.ManyToManyField(related_name='groups', through='movies.GroupMembership', to='movies.user'),
        ),
        migrations.CreateModel(
            name='GroupMovie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('average_score', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('watched', models.BooleanField(default=False)),
                ('added_by', models.CharField(blank=True, max_length=100, null=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movies.group')),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movies.movie')),
            ],
            options={
                'unique_together': {('group', 'movie')},
            },
        ),
        migrations.CreateModel(
            name='UserScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.DecimalField(decimal_places=1, max_digits=3)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movies.group')),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movies.movie')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movies.user')),
            ],
            options={
                'unique_together': {('user', 'movie', 'group')},
            },
        ),
    ]
